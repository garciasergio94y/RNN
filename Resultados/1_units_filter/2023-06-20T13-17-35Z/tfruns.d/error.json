{
  "message": "ValueError: in user code:\n\n<...truncated...>\n    File \"C:\\Users\\sergi\\AppData\\Local\\R-MINI~1\\envs\\R-RETI~1\\lib\\site-packages\\keras\\utils\\traceback_utils.py\", line 70, in error_handler\n        raise e.with_traceback(filtered_tb) from None\n    File \"C:\\Users\\sergi\\AppData\\Local\\R-MINI~1\\envs\\R-RETI~1\\lib\\site-packages\\keras\\engine\\input_spec.py\", line 232, in assert_input_compatibility\n        raise ValueError(\n\n    ValueError: Exception encountered when calling layer 'model' (type Functional).\n    \n    Input 0 of layer \"lstm_2\" is incompatible with the layer: expected ndim=3, found ndim=4. Full shape received: (None, 18, None, 32)\n    \n    Call arguments received by layer 'model' (type Functional):\n      • inputs=('tf.Tensor(shape=(None, 20, 1), dtype=float32)', 'tf.Tensor(shape=(None, None, None), dtype=float32)')\n      • training=True\n      • mask=None\n\n\u001b[90mRun \u001b]8;;rstudio:run:reticulate::py_last_error()\u0007`reticulate::py_last_error()`\u001b]8;;\u0007 for details.\u001b[39m",
  "traceback": ["py_call_impl(callable, call_args$unnamed, call_args$named)", "(structure(function (x = NULL, y = NULL, batch_size = NULL, epochs = 1L, \n    verbose = \"auto\", callbacks = NULL, validation_split = 0, \n    validation_data = NULL, shuffle = TRUE, class_weight = NULL, \n    sample_weight = NULL, initial_epoch = 0L, steps_per_epoch = NULL, \n    validation_steps = NULL, validation_batch_size = NULL, validation_freq = 1L, \n    max_queue_size = 10L, workers = 1L, use_multiprocessing = FALSE) \n{\n    cl <- sys.call()\n    cl[[1L]] <- list2\n    call_args <- split_named_unnamed(eval(cl, parent.frame()))\n    result <- py_call_impl(callable, call_args$unnamed, call_args$named)\n    if (convert) \n        result <- py_to_r(result)\n    if (is.null(result)) \n        invisible(result)\n    else result\n}, class = c(\"python.builtin.method\", \"python.builtin.object\"\n), py_object = <environment>))(batch_size = NULL, epochs = 15L, \n    verbose = \"auto\", validation_split = 0, shuffle = TRUE, class_weight = NULL, \n    sample_weight = NULL, initial_epoch = 0L, x = <environment>, \n    validation_data = <environment>, steps_per_epoch = 58L, validation_steps = 58L, \n    callbacks = list(<environment>, <environment>, <environment>, \n        <environment>, <environment>, <environment>, <environment>))", "do.call(object$fit, args)", "fit.keras.engine.training.Model(., wrap_train, epochs = epochs, \n    steps_per_epoch = train_steps, validation_data = wrap_val, \n    validation_steps = val_steps, callbacks = callbacks)", "fit(., wrap_train, epochs = epochs, steps_per_epoch = train_steps, \n    validation_data = wrap_val, validation_steps = val_steps, \n    callbacks = callbacks)", "model %>% fit(wrap_train, epochs = epochs, steps_per_epoch = train_steps, \n    validation_data = wrap_val, validation_steps = val_steps, \n    callbacks = callbacks)", "eval(ei, envir)", "eval(ei, envir)", "withVisible(eval(ei, envir))", "tuning_run(\"LSTM_samples_script.R\", runs_dir = file.path(resultsdir, \n    \"1_units_filter\"), sample = 0.75, flags = list(batch_size = c(256), \n    conv_filters = c(12, 24), lstm_units = c(8, 32), dense_u = c(12, \n        24)))"]
}
